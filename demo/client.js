// Generated by purs bundle 0.12.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                       
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["foreachE"] = $foreign.foreachE;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Widget"] = $PS["Widget"] || {};
  var exports = $PS["Widget"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var text = function (str) {
      return function (v) {
          return v.appendTextNode(str);
      };
  };
  var functorWidget = new Data_Functor.Functor(function (f) {
      return function (m) {
          return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Effect.functorEffect)(f))(m);
      };
  });
  var el = function (tag) {
      return function (v) {
          return function (v1) {
              return function __do() {
                  v1.pushElement(tag)();
                  var v2 = v(v1)();
                  v1.popElement();
                  return v2;
              };
          };
      };
  };
  var client = function (code) {
      return function (v) {
          return v.client(code);
      };
  };
  var applyWidget = new Control_Apply.Apply(function () {
      return functorWidget;
  }, function (v) {
      return function (v1) {
          return function (impl) {
              return Control_Apply.apply(Effect.applyEffect)(v(impl))(v1(impl));
          };
      };
  });
  var bindWidget = new Control_Bind.Bind(function () {
      return applyWidget;
  }, function (v) {
      return function (k) {
          return function (impl) {
              return function __do() {
                  var v1 = v(impl)();
                  var v2 = k(v1);
                  return v2(impl)();
              };
          };
      };
  });
  var applicativeWidget = new Control_Applicative.Applicative(function () {
      return applyWidget;
  }, function (x) {
      return function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(x);
      };
  });
  exports["el"] = el;
  exports["text"] = text;
  exports["client"] = client;
  exports["functorWidget"] = functorWidget;
  exports["applyWidget"] = applyWidget;
  exports["applicativeWidget"] = applicativeWidget;
  exports["bindWidget"] = bindWidget;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["App"] = $PS["App"] || {};
  var exports = $PS["App"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Unit = $PS["Data.Unit"];
  var Widget = $PS["Widget"];                
  var client2 = Control_Bind.discard(Control_Bind.discardUnit)(Widget.bindWidget)(Widget.text("This is another thing rendered client side"))(function () {
      return Widget.client("App._static_0");
  }); 
  var _static_2 = Widget.el("p")(client2);
  var _static_1 = Widget.el("h2")(Widget.text("This is rendered client side"));
  var _static_0 = Control_Bind.discard(Control_Bind.discardUnit)(Widget.bindWidget)(Widget.el("br")(Control_Applicative.pure(Widget.applicativeWidget)(Data_Unit.unit)))(function () {
      return Widget.text("and works when nested");
  });
  exports["client2"] = client2;
  exports["_static_2"] = _static_2;
  exports["_static_1"] = _static_1;
  exports["_static_0"] = _static_0;
})(PS);
(function(exports) {
  // findComments :: Effect (Array { key :: StaticPtr.Key, node :: Node })
  exports.findComments = function() {
    var results = [];

    go(document.body);

    function go(node) {
      var PREFIX = 'client:';

      if(node.nodeType === Node.COMMENT_NODE) {
        var content = node.textContent.trim();
        if(content.indexOf(PREFIX) == 0) {
          results.push({ key: content.substring(PREFIX.length), node: node });
        }
        return;
      }
      for(var i = 0; i < node.childNodes.length; i++) {
        go(node.childNodes[i]);
      }
    }

    return results;
  };

  // clientImpl :: Node -> Effect Widget.Impl
  //
  //  { pushElement :: TagName -> Effect Unit
  //  , popElement :: Effect Unit
  //  , appendTextNode :: String -> Effect Unit
  //  , client :: StaticPtr (Widget Unit) -> Effect Unit
  //  }
  exports.clientImpl = function(initialNode) {
    return function() {
      var nodesAfter = [initialNode];
      var parentNodes = [initialNode.parentNode];

      function appendNode(node) {
        var parentNode = parentNodes[0];
        var nodeAfter = nodesAfter[0];
        if(nodeAfter) {
          parentNode.insertBefore(node, nodeAfter);
        } else {
          parentNode.appendChild(node);
        }
      }

      return (
        { pushElement: function(tag) {
            return function() {
              var el = document.createElement(tag);
              appendNode(el);
              parentNodes.unshift(el);
              nodesAfter.unshift(null);
            };
          }

        , popElement: function() {
            parentNodes.shift();
            nodesAfter.shift();
          }

        , appendTextNode: function(text) {
            return function() {
              appendNode(document.createTextNode(text));
            };
          }
        , client: function() { return function() {}; }
      });
    };
  };
})(PS["Client"] = PS["Client"] || {});
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  exports.staticPtrTable = {};

  exports._deref = function(table, ptr) {
    return table[ptr];
  };
})(PS["StaticPtr"] = PS["StaticPtr"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["StaticPtr"] = $PS["StaticPtr"] || {};
  var exports = $PS["StaticPtr"];
  var $foreign = $PS["StaticPtr"];       
  var StaticPtr = function (x) {
      return x;
  };
  var unsafeMakeStaticPtr = StaticPtr;
  var key = function (v) {
      return v;
  };
  var deref = function (ptr) {
      return $foreign["_deref"]($foreign.staticPtrTable, ptr);
  };
  exports["deref"] = deref;
  exports["unsafeMakeStaticPtr"] = unsafeMakeStaticPtr;
  exports["key"] = key;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Client"] = $PS["Client"] || {};
  var exports = $PS["Client"];
  var $foreign = $PS["Client"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var StaticPtr = $PS["StaticPtr"];                
  var main = (function () {
      var run = function (impl) {
          return function (ptr) {
              return function __do() {
                  Effect_Console.log("Running: " + StaticPtr.key(ptr))();
                  var v = StaticPtr.deref(ptr);
                  return v(impl)();
              };
          };
      };
      return function __do() {
          var v = $foreign.findComments();
          return Effect.foreachE(v)(function (v1) {
              return function __do() {
                  var v2 = $foreign.clientImpl(v1.node)();
                  var impl$prime = {
                      client: function (ptr) {
                          return run(impl$prime)(ptr);
                      },
                      appendTextNode: v2.appendTextNode,
                      popElement: v2.popElement,
                      pushElement: v2.pushElement
                  };
                  return run(impl$prime)(StaticPtr.unsafeMakeStaticPtr(v1.key))();
              };
          })();
      };
  })();
  exports["main"] = main;
  exports["findComments"] = $foreign.findComments;
  exports["clientImpl"] = $foreign.clientImpl;
})(PS);
PS["StaticPtr"].staticPtrTable["App._static_2"] = PS["App"]._static_2;
PS["StaticPtr"].staticPtrTable["App._static_1"] = PS["App"]._static_1;
PS["StaticPtr"].staticPtrTable["App._static_0"] = PS["App"]._static_0;
PS["Client"].main();
